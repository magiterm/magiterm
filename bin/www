#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';
const app = require('../app');
const debug = require('debug')('magiterm:server');
const http = require('http');
const User = require('../models/User');
const Messages = require('../models/Messages');
const docker = require('../utils/dockerAPI');

const crypto = require('crypto'),
    algorithm = 'aes-256-ctr',
    password = 'mdirjwnstkdo491mndgiiu23na1';

function encrypt(text){
  var cipher = crypto.createCipher(algorithm,password)
  var crypted = cipher.update(text,'utf8','hex')
  crypted += cipher.final('hex');
  return crypted;
}
 
function decrypt(text){
  var decipher = crypto.createDecipher(algorithm,password)
  var dec = decipher.update(text,'hex','utf8')
  dec += decipher.final('utf8');
  return dec;
}    
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(socket) {
  console.log('New Socket Connection!');

  socket.on('/TE/', function(code) {
    //rebroadcast the message to all connected sockets.
    io.sockets.emit('/TE/' + code.containerName, code);
  });

  socket.on('/TERM/', function(code) {
    io.sockets.emit('/TERM/' + code.containerName, code);
  });

  socket.on('/TERM/RES/', function(code) {
    io.sockets.emit('/TERM/RES/' + code.containerName, code);
  });

  socket.on('/COM/', function(data) {
    io.sockets.emit('/COM/' + data.containerName, data);
  });

  socket.on('/ANALYZE/', function(command) {
    console.log('in analyze!!!');

    var cmd = command.command;
    var containerName = command.containerName;

    if(cmd.split(" ")[0] === 'cd') {
      let newdir = cmd.split(" ")[1];
      console.log('change dir to: ', newdir);
      let readyToExecute = true;
      if(newdir === '..') {
        readyToExecute = false;
        docker.runCommand(containerName, 'cat /picoShell/.pico', function(err, picoRes) {
          if(picoRes[picoRes.length - 1] === '\n') picoRes = picoRes.slice(0, picoRes.length - 1);
          newdir = picoRes;
          if(newdir.indexOf('/') !== newdir.lastIndexOf('/')) {
            newdir = newdir.slice(0, newdir.lastIndexOf('/'));
          } else {
            newdir = '/';
          }

          const command = 'bash -c "echo ' + newdir + ' > /picoShell/.pico' + '"'; 
          docker.runCommand(containerName, command, function(err, res1) {
            if (err) {
              io.sockets.emit('/CMD/' + containerName, err);
            } else {
              console.log('this is newdir', newdir);
              io.sockets.emit('/CMD/' + containerName, {res: res1, pwd: newdir});
            }
          });
        });
      } else if (newdir[0] !== '/') {
        //append newdir to current dir
        readyToExecute = false;
        docker.runCommand(containerName, 'cat /picoShell/.pico', function(err, picoRes) {
          if(picoRes[picoRes.length - 1] === '\n') picoRes = picoRes.slice(0, picoRes.length - 1);
          if(picoRes[picoRes.length - 1] === '/') picoRes = picoRes.slice(0, picoRes.length - 1);
          const dir = picoRes + '/' + newdir;
          console.log('this is the new path', dir);

          docker.directoryExists(containerName, dir, function(dirRes) {
            if(dirRes.indexOf('Directory exists') !== -1) {
              const command = 'bash -c "echo ' + dir + ' > /picoShell/.pico' + '"'; 
              //const command = 'bash -c "cd ' + newdir + '"';
              console.log(command);
              docker.runCommand(containerName, command, function(err, res1) {
                if (err) { io.sockets.emit('/CMD/' + containerName, err);} 
                else {
                  io.sockets.emit('/CMD/' + containerName, {res: res1, pwd: dir});
                }
              });
            } else {
              io.sockets.emit('/CMD/' + containerName, 'Error: Directory not found\n');
            }
          });
        });
      }

      if(readyToExecute) {
        const command = 'bash -c "echo ' + newdir + ' > /picoShell/.pico' + '"';
        console.log(command);
        docker.directoryExists(containerName, newdir, function(dirRes) {
          if(dirRes.indexOf('Directory exists') !== -1) {
            docker.runCommand(containerName, command, function(err, res1) {
              if (err) { io.sockets.emit('/CMD/' + containerName, err);} 
              else { 
                docker.runCommand(containerName, 'cat /picoShell/.pico', function(err2, res2) {
                  io.sockets.emit('/CMD/' + containerName, {res: res1, pwd: res2});
                });
              }
            });
          } else {
            io.sockets.emit('/CMD/' + containerName, err);
          }
        });
      }
    } else if(cmd.split(" ")[0] === 'open') {
      docker.runCommand(containerName, 'cat /picoShell/.pico', function(err1, res1) {
        if(res1[res1.length - 1] === '\n') res1 = res1.slice(0, res1.length - 1);
        const command = 'cat ' + res1 + '/' + cmd.split(" ")[1];
        docker.runCommand(containerName, command, function(err2, res2) {
          if(err2) {
            io.sockets.emit('/CMD/' + containerName, err2);
          } else {
            const obj = {
              termResponse: res2,
              fileOpen: true,
              fileName: cmd.split(" ")[1],
              filePath: res1
            }
            console.log('this is the object file,', obj)
            io.sockets.emit('/CMD/' + containerName, obj);
          }
        });
      });
    } else {
      docker.runCommand(containerName, 'cat /picoShell/.pico', function(err1, res1) {
        console.log('response from cat /picoShell/.pico :', res1);
        console.log('this is the container name', containerName);

        if (err1) {
          io.sockets.emit('/CMD/' + containerName, err1);
        } else {
          res1 = res1.replace(/^\s+|\s+$/g, '');

          cmd = '"cd ' + res1 + ' && ' + cmd + '"';
          const command = 'bash -c ' + cmd;
          console.log(command);
          docker.runCommand(containerName, command, function(err2, res2) {
            if (err2) { io.sockets.emit('/CMD/' + command.containerName, err2); } 
            else {
              console.log('emitting this: ', res2);
              console.log('/CMD' + containerName, res2);
              io.sockets.emit('/CMD/' + containerName, res2);
            }
          });
        }

      }) 
    }
  })

  socket.on('/userEncrypt', function(userObj) {
    //encrypt username
    const encrypted = encrypt(userObj.username);
    console.log('ENCRYPTED', encrypted);
    io.sockets.emit('/' + userObj.username + '/encrypted', encrypted);
  });

  socket.on('/userDecrypt', function(userObj) {
    const username = decrypt(userObj.encrypted);
    User.findOne({
      where: {
        username: username
      }
    })
    .then(function(response) {
      if(response) {
        io.sockets.emit('/auth/' + userObj.encrypted, true);
      } else {
        io.sockets.emit('/auth/' + userObj.encrypted, false);
      }
    });
  });

  socket.on('/TERM/CD/', function(code) {
    io.sockets.emit('/TERM/CD/' + code.containerName, code);
  });

  socket.on('/DASH/INVITE/', function(invite) {
    io.sockets.emit('/DASH/INVITE/' + invite.recipient, invite);
  });

  socket.on('/DASH/INVITE/ACCEPT/', function(invite) {
    io.sockets.emit('/DASH/INVITE/ACCEPT/' + invite.recipient, invite);
  });

  socket.on('/DASH/REMOVE/COLLABORATOR/', function(rejection) {
    io.sockets.emit('/DASH/REMOVE/COLLABORATOR/' + rejection.recipient, rejection);
  });

  socket.on('/DASH/REMOVE/COLLABWITH/', function(rejection) {
    io.sockets.emit('/DASH/REMOVE/COLLABWITH/' + rejection.recipient, rejection);
  });

  socket.on('/CHAT/', function(msg) {
    io.sockets.emit('/CHAT/' + msg.containerName, msg);
    console.log('THIS IS MESSAGE', msg);
    Messages.create({
      userID: msg.sender,
      containerID: msg.containerName,
      message: msg.msg, 
    })
    .then(function(results) {
      console.log('Successfully saved message to the database');
    })
    .catch(function(err) {
      console.log('Failed to send message to the database', err);
    })
  });

  socket.on('/TERM/SHOW/', function(show) {
    io.sockets.emit('/TERM/SHOW/' + show.containerName, show);
  });

  socket.on('/TE/JOIN/', function(code) {
    io.sockets.emit('/TE/JOIN/' + code.containerName, code);
  })

  socket.on('/DASH/UPDATE/COLLABROLE/', function(roleUpdate) {
    console.log('/DASH/UPDATE/COLLABROLE/', roleUpdate);
    io.sockets.emit('/DASH/UPDATE/COLLABROLE/' + roleUpdate.recipient, roleUpdate);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
